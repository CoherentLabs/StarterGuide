<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapters on</title><link>https://coherentlabs.github.io/StarterGuide/chapters/</link><description>Recent content in Chapters on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 15 Sep 2021 08:38:10 +0300</lastBuildDate><atom:link href="https://coherentlabs.github.io/StarterGuide/chapters/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 10: Debugging, Profiling and Optimizations</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-10/</link><pubDate>Wed, 15 Sep 2021 08:39:28 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-10/</guid><description>In this chapter we’ll go over how to use the Dev Tools to debug, profile and then optimize your UI. These concepts are a standard in web development and we&amp;rsquo;ll focus on how to apply them to Gameface.
The Gameface Dev Tools look identical to the Chrome Dev Tools, but with a more limited functionality. To open them you can either press F12 in the Player, or go to http://localhost:9444/ in the browser of choice.</description></item><item><title>Chapter 9: Map</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-9/</link><pubDate>Wed, 15 Sep 2021 08:39:24 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-9/</guid><description>In this chapter we’ll show you how to use some of the more advanced features and techniques in Gameface to create a map. We’ll look at how to make a large tiled map that can be moved around with the mouse and zoomed in and out. The map will also have a custom cursor and points of interest that will show the relevant information when hovered over. All of this will be achieved through data-binding.</description></item><item><title>Chapter 8: Inventory</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-8/</link><pubDate>Wed, 15 Sep 2021 08:39:21 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-8/</guid><description>In this chapter we’ll create our first whole UI page by using everything we have learned about data-binding and event triggering. This will be the inventory where we’ll have a grid (in which we’ll position items) and a details element (that will show the details of the selected item).
Drawing a grid of cells To get started we’ll first draw our grid by using data-binding. Our first job is to create an array with empty objects that will represent the item slots in our model.</description></item><item><title>Chapter 7: Adding more menus</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-7/</link><pubDate>Wed, 15 Sep 2021 08:39:17 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-7/</guid><description>Now that we have our Settings Menu, we can start adding other menus like an Inventory and a Map. Since in a real game all of these menus won’t be on the same page, we need to add their content to be dynamically loaded in the Pause Menu. Luckily for us, we can use what we already have learned about data-binding to do that.
The first thing we need to do is to add a new value to our model.</description></item><item><title>Chapter 6: Settings Menu</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-6/</link><pubDate>Wed, 15 Sep 2021 08:39:13 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-6/</guid><description>Now that we have set up our Pause Menu (in the previous chapter), we can start adding the different menus inside. The first one that we’ll create is the Settings Menu.
For the purpose of this tutorial we’ll add only a handful of options to the Settings. These will be: Volume, Resolution, Difficulty and Subtitles. While these may seem like they are not enough for a Settings Menu, the idea is to only demonstrate how it can be achieved.</description></item><item><title>Chapter 5: Pause Menu</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-5/</link><pubDate>Wed, 15 Sep 2021 08:39:09 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-5/</guid><description>In this chapter we will learn:
how to capture input from the keyboard in the UI, how to emit an event from the UI to the game, mock how the game handles the event. For this purpose we will create a Pause Menu - it will open when the ESC key on the keyboard is pressed, and close once the same key is pressed again.
First we will start with the model by adding a new property called isPaused with a value false.</description></item><item><title>Chapter 4: Minimap</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-4/</link><pubDate>Wed, 15 Sep 2021 08:39:05 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-4/</guid><description>In this chapter we will combine all knowledge about data-binding we have gained so far and build a more complex widget - a minimap.
Before we start, we need to decide on the approach we are going to take. For the purpose of this tutorial, we will use different tiles that are part of a larger map and load them through the model. Each tile will have a number that corresponds to its id.</description></item><item><title>Chapter 3: Health Bar</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-3/</link><pubDate>Wed, 15 Sep 2021 08:39:01 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-3/</guid><description>In this chapter we will create a health bar in our UI using some new types of data-binding.
Add health values to our model To get started, we will first add two new properties to our model - currentHealth and maxHealth. These will be used to determine how much of the health bar is filled and to display the information as a number next to it. For now we will set both to 100.</description></item><item><title>Chapter 2: Creating our first UI component</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-2/</link><pubDate>Wed, 15 Sep 2021 08:38:57 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-2/</guid><description>Now that we have our project set up and are aware of the different approaches available, we can create our first UI component.
This will be a simple component that will demonstrate one of the most important features of Gameface - its dynamic data-binding. The component will be a Clock, placed in the bottom right corner of our HUD.
Mocking our data Before we begin writing our HTML and JavaScript, we need to figure out how we are going to provide the data for our components.</description></item><item><title>Chapter 1: Getting Started</title><link>https://coherentlabs.github.io/StarterGuide/chapters/chapter-1/</link><pubDate>Wed, 15 Sep 2021 08:26:04 +0300</pubDate><guid>https://coherentlabs.github.io/StarterGuide/chapters/chapter-1/</guid><description>Choosing the right fit for your project: As with any Front End project, there are numerous ways to create your project. Here we will go over the main supported ones in Gameface.
Plain JavaScript The most simple way to start your project is by writing pure HTML with CSS and JavaScript. Here you don’t need to worry about any libraries and dependencies to build your project.
The benefit of writing plain JavaScript is that over time your codebase would not end up needlessly bloated with dependencies and it will have better performance than some of the other frameworks and libraries.</description></item></channel></rss>