<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unreal Chapters on</title><link>https://starter.coherent-labs.com/unreal-chapters/</link><description>Recent content in Unreal Chapters on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 15 Sep 2021 08:38:10 +0300</lastBuildDate><atom:link href="https://starter.coherent-labs.com/unreal-chapters/index.xml" rel="self" type="application/rss+xml"/><item><title>Unreal Engine Chapter 5: Handling events received from JavaScript</title><link>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-5/</link><pubDate>Wed, 08 Dec 2021 17:45:44 +0200</pubDate><guid>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-5/</guid><description>In this final chapter we will demonstrate how the change_menu, pause_toggle, map_move and map_zoom events triggered from JavaScript can be handled in Unreal C++.
Overview of the requirements To implement these events, we need to check what kind of data some will be passing over to C++ (as per Chapter 11), as well as see what kind of behavior is expected to happen afterwards in C++ (as per the implementation in Chapter 9).</description></item><item><title>Unreal Engine Chapter 4: Creating the Map and Point of Interest</title><link>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-4/</link><pubDate>Sat, 04 Dec 2021 01:44:53 +0200</pubDate><guid>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-4/</guid><description>In this chapter we will wrap up the data transitioning from JavaScript to Unreal C++. This will be marked by the implementation of the Map model.
Overview of the required Map model data Looking at the data of the map object from the Chapter 9 model.js of the original Starter Guide, we will require another C++ class to be created from the Editor, called MapModel and once again, to spare us unnecessary code noise, we can set its parent class to be UObject.</description></item><item><title>Unreal Engine Chapter 3: Creating the Player Model, Minimap and Inventory</title><link>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-3/</link><pubDate>Fri, 03 Dec 2021 23:02:33 +0200</pubDate><guid>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-3/</guid><description>In this chapter we will start translating the JavaScript data in the model.js file (in the state that it is at the end of Chapter 9) to Unreal C++ and introduce our automatic data-binding feature, exclusive to our Unreal Engine plugin.
Introducing the UType Binder By far the most convenient feature we have (and will start demonstrating starting from this chapter onwards) available is the automatic data-binding. We have a whole section in our documentation that covers the feature in great detail, but for this guide all you need to know is that we&amp;rsquo;re going to basically expose class member data through Unreal&amp;rsquo;s reflection system and this is done by simply including the relevant header file that we have available.</description></item><item><title>Unreal Engine Chapter 2: Map setup</title><link>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-2/</link><pubDate>Fri, 03 Dec 2021 18:13:19 +0200</pubDate><guid>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-2/</guid><description>In this chapter we will go over how the StarterGuide map was configured. Since the map is supposed to be a quick and simple demonstration, we won&amp;rsquo;t go over details such as how to setup a View in Blueprint, as this information is already available in our Getting started section of our documentation.
Creating the Map The StarterGuide map was duplicated from the Example map, since it contained most of the required setup that we need, like setting up the View.</description></item><item><title>Unreal Engine Chapter 1: Getting Started</title><link>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-1/</link><pubDate>Fri, 03 Dec 2021 17:10:11 +0200</pubDate><guid>https://starter.coherent-labs.com/unreal-chapters/ue-chapter-1/</guid><description>Overview This guide is meant to demonstrate how to translate the frontend model data and process events from the original guide to Unreal Engine C++, while also showcasing the powerful and convenient automatic data-binding feature that we have for Unreal.
Structure Unlike the Front End guide where you were supposed to implement the logic on your own for each chapter, the Unreal guide aims to be more of a &amp;ldquo;walkthrough&amp;rdquo; in terms of how the data transition was realized.</description></item></channel></rss>